// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id            String @id @default(uuid())
  name          String
  products      Product[]
}

model Collection {
  id            String @id @default(uuid())
  name          String
  products      Product[]
}

model Artist {
  id            String @id @default(uuid())
  name          String
  albums        Product[]
}

model Track {
  id            String @id @default(uuid())
  name          String
  number        Int
  url           String?
  productId     String
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Variant {
  id            String @id @default(uuid())
  productId     String
  Product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name          String
  price         Int
  stock         Int
  cartItems     CartItem[]
}

model Product {
  id            String @id @default(uuid())
  title         String
  artistId      String
  artist        Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  coverImageUrl String
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  collections   Collection[]
  variants      Variant[]
  tracks        Track[]
  releaseDate   DateTime
}

model User {
  id            String @id @default(uuid())
  email         String @unique
  isActive      Boolean
  cart          Cart?
}

model CartItem {
  id            String @id @default(uuid())
  variantId     String
  variant       Variant @relation(fields: [variantId], references: [id])
  cartId        String?
  cart          Cart? @relation(fields: [cartId], references: [id])
}

model Cart {
  id            String @id @default(uuid())
  cartItems     CartItem[]
  userId        String @unique
  user          User @relation(fields: [userId], references: [id])
  isPlaced      Boolean
  datePlaced    DateTime?
}