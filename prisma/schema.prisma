// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id            String @id @default(uuid())
  name          String
  products      Product[]
}

model Collection {
  id            String @id @default(uuid())
  name          String
  products      ProductCollection[]
}

model Artist {
  id            String @id @default(uuid())
  name          String
  albums        Product[]
}

model CoverImage {
  id            String @id @default(uuid())
  url           String
  width         Int
  height        Int
  product       Product?
}

model Track {
  id            String @id @default(uuid())
  name          String
  number        Int
  url           String?
  productId     String
  product       Product @relation(fields: [productId], references: [id])
}

model Stock {
  id            String @id @default(uuid())
  product       Product?
  qtyCd         Int
  qtyLp         Int
}

model ProductCollection {
  @@id([collectionId, productId])
  productId     String
  product       Product @relation(fields: [productId], references: [id])
  collectionId  String
  collection    Collection @relation(fields: [collectionId], references: [id])
}

model Product {
  id  String    @id @default(uuid())
  title         String
  artistId      String
  artist        Artist @relation(fields: [artistId], references: [id])
  price         Int
  coverImageId  String @unique
  coverImage    CoverImage @relation(fields: [coverImageId], references: [id])
  categoryId    String
  category      Category @relation(fields: [categoryId], references: [id])
  collections   ProductCollection[]
  stockId       String @unique
  stock         Stock @relation(fields: [stockId], references: [id])
  tracks        Track[]
  releaseDate   DateTime
}